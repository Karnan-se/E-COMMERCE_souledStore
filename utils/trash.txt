


// let toggleoffer = async(req, res)=>{
//     try {
//         const offerID = req.query.offerID;
//         console.log(offerID);
//         const islIsted = await Offermodule.findOne({_id:offerID});
        
//         const ProductId = islIsted.product;
//         const categoryId = islIsted.category;
//         const fixed = parseInt(islIsted.fixedRate);
//         const percentage = parseInt(islIsted.discountPercent);
   
//         if(islIsted.is_List == true){
//             console.log("going to unlist")
//        await Offermodule.updateOne({_id:offerID},{$set:{is_List:false}});
//        if(ProductId){
//        const product = await Product.findOne({_id:ProductId})
//        const resetPrice = parseInt(product.orginalPrice);
//        console.log(resetPrice)  
//        await Product.updateOne({_id:ProductId},{$set:{price:resetPrice}})


//        console.log("Product resetted");
//        }else if(categoryId ){

//         let product = await Product.find({category:categoryId})
//        Promise.all(product.map(async(item)=> {
//         item.price=item.orginalPrice
//         await item.save()
//         }))
//         console.log("Price is resetted for category");
//        }

// //  going to List

//         }else{
//             await Offermodule.updateOne({_id:offerID},{$set:{is_List:true}})
//             if(ProductId && fixed){
//                 console.log("ProductId and Fixed Price")
//                 const product = await Product.findOne({_id:ProductId})
//                 if(product.orginalPrice == "undefined" || product.price == product.orginalPrice){

//                const orginPriceInserted= await Product.updateOne({_id:ProductId},{$set:{orginalPrice:parseInt(product.price)}},{upsert:true});
//                 await Product.updateOne({_id:ProductId},{$inc:{price:-fixed}});
//                 console.log(orginPriceInserted);
//                 console.log("discount Applied");

//                 }else{
//                     console.log("categoryDiscount is already greater")
//                 }
//             }else if(ProductId && percentage) {
//                 console.log("Product and percentage")
//               const product = await Product.findOne({_id:ProductId})
//               const percent =  product.price*percentage/100;
//               if(typeof product.orginalPrice == "undefined" || product.price == product.orginalPrice ){
//                 console.log("overRided The condition")
//                 const product = await Product.findOne({_id:ProductId})
//              const orginPriceInserted=  await Product.updateOne({_id:ProductId},{$set:{orginalPrice:parseInt(product.price)}},{upsert:true})
//              console.log(orginPriceInserted);
//               await Product.updateOne({_id:ProductId},{$inc:{price:-percent}})
//               console.log("discount Applied");
//               }else{
//                 console.log("category discount is already greater")
//               }
//             }




//             if(categoryId && fixed){
//                 console.log("when it is fixed");
//               let product = await Product.find({category:categoryId});
//               const updateallcat = Promise.all(product.map(async(item)=>{
//                 await product.updateOne({category:categoryId},{$set:{orginalPrice:Math.floor(parseInt(item.price))}},{upsert:true})

//                const increasedForall= await product.updateMany({category:categoryId},{$inc:{price:-fixed}})
//                console.log(increasedForall,"increased for all")
//               }))
//              console.log("category fixed Listed",updateallcat);
//             }else if(categoryId && percentage){
//                 let product = await Product.find({category:categoryId});
//               const updateallcat =await Promise.all(product.map(async(item)=>{
//                 const inserorginalPrice = await Product.updateMany({category:categoryId},{$set:{orginalPrice:parseInt(item.price)}},{upsert:true})
//                     let percent = Math.floor(parseInt(item.price*percentage)/100)
//                     const currentPrice = item.price;
//                     item.price =currentPrice-percent; 
//                     await item.save() 
//                 }))
                
//                 console.log("all The product Updated", )
            
//             }
           
//         }
//         console.log("upto here working")
//         return await res.status(200).json({data:"reload"})
  

        
//     } catch (error) {
//         console.log(error.message)
        
//     }
// }                                                        const retryButton = document.querySelectorAll(".retryTransaction");
                                                                    retryButton.forEach((retry) => {
                                                                        retry.addEventListener("click", async function () {
                                                                            console.log("retyTransaction");
                                                                            const totalamount = this.getAttribute("data-amount")
                                                                            console.log(totalamount)
                                                                            const response = await fetch(`/retryTransaction?totalPrice=${totalamount}`, {
                                                                                method: "GET",
                                                                            })
                                                                            if (!response) {
                                                                                throw new Error("internal Server Error")
                                                                            }
                                                                            const data = await response.json();
                                                                            var options = {
                                                                                "key": "rzp_test_ihsNz6lracNIu3",
                                                                                "amount": data.order.amount,
                                                                                "currency": "INR",
                                                                                "name": "Karnan Corp",
                                                                                "description": "Test Transaction",
                                                                                "image": "https://example.com/your_logo",
                                                                                "order_id": data.order.order_id,
                                                                                "handler": async (responseHandler) => {
                                                                                    const response = await fetch(`/addAmounttoWallet?amount=${data.order.amount}`, {
                                                                                        method: "GET"

                                                                                    })
                                                                                    if (!response) {
                                                                                        throw new Error("Internal Server Error")
                                                                                    }
                                                                                    const datas = response.json()
                                                                                    console.log(datas.datas)
                                                                                    const Toast = Swal.mixin({
                                                                                        toast: true,
                                                                                        position: "top-end",
                                                                                        showConfirmButton: false,
                                                                                        timer: 3000,
                                                                                        timerProgressBar: true,
                                                                                        didOpen: (toast) => {
                                                                                            toast.onmouseenter = Swal.stopTimer;
                                                                                            toast.onmouseleave = Swal.resumeTimer;
                                                                                        }
                                                                                    });
                                                                                    Toast.fire({
                                                                                        icon: "success",
                                                                                        title: "Amont credited to The Wallet"
                                                                                    }).then(() => window.location.reload())


                                                                                },
                                                                                "theme": {
                                                                                    "color": "#3399cc"
                                                                                }
                                                                            };
                                                                            var rzp1 = new Razorpay(options);
                                                                            rzp1.on('payment.failed', async (responseFailed) => {
                                                                                const Toast = Swal.mixin({
                                                                                    toast: true,
                                                                                    position: "top-end",
                                                                                    showConfirmButton: false,
                                                                                    timer: 3000,
                                                                                    timerProgressBar: true,
                                                                                    didOpen: (toast) => {
                                                                                        toast.onmouseenter = Swal.stopTimer;
                                                                                        toast.onmouseleave = Swal.resumeTimer;
                                                                                    }
                                                                                });
                                                                                Toast.fire({
                                                                                    icon: "warning",
                                                                                    title: "Transaction Failed"
                                                                                }).then(() => window.location.reload())

                                                                            });
                                                                            rzp1.open();



                                                                        })
                                                                    })
                                                                </script>
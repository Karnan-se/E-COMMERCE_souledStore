<!DOCTYPE HTML>
<html lang="en">



<head>
<%- include('./partials/header.ejs') %>
</head>

<body>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

    <% if( typeof(newmessage) !== "undefined") { %>

        <script>
            Swal.fire({
            title: "Error",
            text: "product already exists in the selected category",
            icon: "error",
            confirmButtonText: "OK"
        });


</script>

        <%}%>





    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="/admindashboard" class="brand-wrap">
                <img src="imgs/theme/logo.jpg" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i> </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item">
                    <a class="menu-link" href="/admindashboard"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="/page-products-list"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                    <div class="submenu">
                                  <a href="/page-products-list"> Product List</a>                 
                                                  
                                       
                        <a href="/page-categories">Categories</a>
                    </div>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="/page-orders-1"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Orders</span>
                    </a>
                    <div class="submenu">
                        <a href="/page-orders-1">Orders</a>
                       
                       
                    </div>
                </li>
                <li class="menu-item has-submenu">
                 <li class="menu-item has-submenu">
                    <a class="menu-link" href="/admin-user-page"> <i class="icon material-icons md-store"></i>
                        <span class="text">Users</span>
                    </a>
                    <div class="submenu">
                        
                  
                        <a href="/admin-user-page" class="active">User-Details</a>
                        
                    </div>
                </li>
               <li class="menu-item has-submenu active">
                    <a class="menu-link" href="/page-form-product-3"> <i class="icon material-icons md-add_box"></i>
                        <span class="text">Add product</span>
                    </a>
                    <div class="submenu">
                        <a href="/page-form-product-3" class="active">Add product </a>
                    </a>
                   
                </li>
                <%- include('./partials/aside-2.ejs') %>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                       
                    </div>
                    <datalist id="search_terms">
                        <option value="Products">
                        <option value="New orders">
                        <option value="Apple iphone">
                        <option value="Ahmed Hassan">
                    </datalist>
                </form>
            </div>
            <div class="col-nav">
                <button class="btn btn-icon btn-mobile me-auto" data-trigger="#offcanvas_aside"> <i class="material-icons md-apps"></i> </button>
                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link btn-icon" href="#">
                            <i class="material-icons md-notifications animation-shake"></i>
                            <span class="badge rounded-pill">3</span>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i> </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownLanguage">
                            <a class="dropdown-item text-brand" href="#"><img src="/imgs/theme/flag-us.png" alt="English">English</a>
                            <a class="dropdown-item" href="#"><img src="/imgs/theme/flag-fr.png" alt="Français">Français</a>
                            <a class="dropdown-item" href="#"><img src="/imgs/theme/flag-jp.png" alt="Français">日本語</a>
                            <a class="dropdown-item" href="#"><img src="/imgs/theme/flag-cn.png" alt="Français">中国人</a>
                        </div>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount" aria-expanded="false"> <img class="img-xs rounded-circle" src="/imgs/people/avatar2.jpg" alt="User"></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit Profile</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-settings"></i>Account Settings</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-account_balance_wallet"></i>Wallet</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-receipt"></i>Billing</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-help_outline"></i>Help center</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="/logout"><i class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div>
        </header>
        <section class="content-main">
            <div class="row">
                <div class="col-9">
                    <div class="content-header">
                        <h2 class="content-title">Add New Product</h2>
                        <div>
                            <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button>
                            <button class="btn btn-md rounded font-sm hover-up" onclick="save()">save</button>
                        </div>
                    </div>
                    
                </div>
                <div class="col-lg-7">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-4">
                                <label for="product_title" class="form-label">Product title</label>
                                <input type="text" placeholder="Type here" class="form-control" id="product_title" name="productname" onkeyup="textverify()">
                                <p id="pError"></p>
                            </div>
                            <script>
                                function textverify(){

                               const productTitle = document.getElementById("product_title");
                               const textError = document.getElementById("pError");
                           

                               return verifyText(productTitle, textError)

                                }
                                function verifyText(title, text){
                                    if (!/^[A-Za-z][A-Za-z\s]{2,}$/.test(title.value)) {
                                        text.textContent = " title must be at least 3 characters long and contain only letters.";
                                        text.style.color = "red";
                                        return false
                                } else {
                                    text.textContent = "";
                                    return true
                                }
                                }
                                </script>

                            <div class="row gx-3">
                                <div class="col-md-5  mb-3 d-none" >
                                    <label for="product_sku" class="form-label d-none d-none">stock</label>
                                    <input type="number" placeholder="Type here" class="form-control d-none" id="product_sku" name="stock">

                                    
                                </div>
                                <script>
                                     document.addEventListener("DOMContentLoaded", function () {
                                    const stockValue =document.getElementById("product_sku");
                                    const errorMessage = document.getElementById("error_message");
                                    const PriceError =document.getElementById("priceError")
                                    const price = document.getElementById("price");

                                     function validate(){
                                        const enteredValue = parseFloat(stockValue.value)
                                        const priceValue = parseFloat(price.value)

                                        if(enteredValue<=0){
                                            errorMessage.textContent="stock cannot be less than zero"
                                            setTimeout(()=>{
                                                errorMessage.textContent=""
                                            },3000)

                                        }else if(priceValue<=0){
                                            priceError.textContent="Price cannot be less than zero"
                                            setTimeout(() => {
                                                priceError.textContent=""
                                                
                                            },3000);
          
                                        }else{
                                           
                                                error.textContent =""
                                        }

                                    }
                                 stockValue.addEventListener("input", validate)
                                 stockValue.addEventListener("change", validate)
                                 price.addEventListener("change", validate);
                                 price.addEventListener("input", validate);
                                })
                                    </script>
                                <div class="col-md-4  mb-3">
                                    <label for="product_color" class="form-label">Color</label>
                                    <input type="text" placeholder="Type here" class="form-control" id="product_color" name="color">
                                </div>
                                <div class="col-md-3  mb-0 mt-4 d-none">
                                    <!-- size need to be drop dopwn -->
                                    <select class="form-select d-none" name="size">
                                        <option value="null">select size</option>
                                        <option value="S">S</option>
                                        <option value="M">M</option>
                                        <option value="L">L</option>
                                        <option value="XL">XL</option>
                                        <option value="XXL">XXL</option>
                                    </select>
                                    
                                </div>
                                
                                <div class="row newSizes">
                                    <div class="col-md-4  mb-3" >
                                        
                                        <label for="sizeS">Size S:</label>
                                        <input type="number" id="sizeS" name="sizes[S]" class="form-control"  min="0" value="0" onkeyup="intverify()">
                                      </div>
                                      <div class="col-md-4  mb-3">
                                        <label for="sizeM">Size M:</label>
                                        <input type="number" id="sizeM" name="sizes[M]" min="0" value="0" class="form-control" onkeyup="intverify()">
                                      </div>
                                      <div class="col-md-4  mb-3">
                                        <label for="sizeL">Size L:</label>
                                        <input type="number" id="sizeL" name="sizes[L]" min="0" value="0" class="form-control" onkeyup="intverify()">
                                      </div>
                                      <div class="col-md-4  mb-3">
                                        <label for="sizeXL">Size XL:</label>
                                        <input type="number" id="sizeXL" name="sizes[XL]" min="0" value="0" class="form-control" onkeyup="intverify()">
                                      </div>
                                      <div class="col-md-4  mb-3">
                                        <label for="sizeXXL">Size XXL:</label>
                                        <input type="number" id="sizeXXL" name="sizes[XXL]" min="0" value="0" class="form-control" onkeyup="intverify()">
                                      </div>
                                    <div id="error_message" style="color: red;"></div>

                                    </div>
                            </div>
                            <script>
                                 function intverify(){
                                let  smallStock = document.getElementById("sizeS")
                                let  mediumStock = document.getElementById("sizeM")
                                let  largeStock = document.getElementById("sizeL")
                                let  XlStock = document.getElementById("sizeXL")
                                let  XXLStock = document.getElementById("sizeXXL")

                                 giveRedborder(smallStock)
                                 giveRedborder(mediumStock)
                                 giveRedborder(largeStock)
                                 giveRedborder(XlStock)
                                 giveRedborder(XXLStock)
 
                                 let isValid = true;

                                 if (!giveRedborder(smallStock)) isValid = false;
                                 if (!giveRedborder(mediumStock)) isValid = false;
                                 if (!giveRedborder(largeStock)) isValid = false;
                                 if (!giveRedborder(XlStock)) isValid = false;
                                 if (!giveRedborder(XXLStock)) isValid = false;


                                 console.log(isValid)

                                 return isValid;


                                 }
                                 console.log(intverify())

                                 function giveRedborder(stock){
                                  
                                if(stock.value< 0){
                                    stock.style.border= "1px solid red"
                                        return false
                                }else{
                                    stock.style.border= "1px solid black"
                                    return true
                                }

                                 }
                                 

                                </script>
                         
                        </div>
                    </div> <!-- card end// -->
                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Description</label>
                                <textarea placeholder="Type here" class="form-control" rows="4" name="Description" id="description" onkeyup="descverify()"></textarea>
                                <p id="descError"></p>
                            </div>
                        </div>
                    </div> <!-- card end// -->

                    <script>
                        function descverify(){
                           const desc = document.getElementById("description")
                           const Error = document.getElementById("descError")

                            return verifyText(desc, Error)

                                }

                        
                        </script>


                    <div class="tab-content wow fadeIn animated mx-4 d-flex" id="myTabContent">
                        <div class="tab-pane fade show active" id="tab-one" role="tabpanel" aria-labelledby="tab-one">
                            <div class="row product-grid-4">
                                <div class="product-cart-wrap mb-30 custom-product-card">
                                    <div class="product-img-action-wrap">
                                        <div class="product-img product-img-zoom">
                                            <!-- <a href="/shop-product-right"> -->
                                                <div class="hover-image"></div>
                                                <div   id="cropped-images-container" class="preview-images d-flex flex-wrap justify-content-start position-relative">
                                                    <!-- Images and buttons will be dynamically inserted here -->
                                                </div>
                                            <!-- </a> -->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="card mb-4">
                        <div class="card-body">
                            <div>
                                <label class="form-label">Images</label>
                                <input class="form-control" type="file" name="Images" id="input-images" accept="image/*" multiple>
                            </div>
                        </div>
                    </div> 
                </div>

                <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>
                <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
               
                <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/js/all.min.js" integrity="sha512-aa9kPB0RB5pcLpSziNYssVzPhcUSlt/ouQpQfktNSx5JqI1U2AbOqTfRIFmdYq0+ZQLXfS7vARv5Bw+P0pY1Kw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
                
          

                <script>
                    $(document).ready(function() {
                        let createImageContainer = function(imageSrc, imageName) {
                            let imageContainer = $($.parseHTML(`
                                <div class="col-lg-4 col-md-4 col-12 col-sm-6 position-relative">
                                    <div class="product-cart-wrap mb-30 custom-product-card">
                                        <div class="product-img-action-wrap">
                                            <div class="product-img product-img-zoom">
                                                <div class="hover-image"></div>
                                                <img class="default-img" src="${imageSrc}" alt="" id="newImages">
                                                <button class="btn btn-primary btn-center delete-btn" data-image="${imageName}" style="font-size: 12px; line-height: 1; max-width: 100%">
                                                    <i class="fas fa-solid fa-trash text-sm" style="font-size: 8px;"></i> 
                                                    delete
                                                </button>
                                                <button class="btn btn-primary crop mx-5" style="line-height: 1">Crop</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `));
                            return imageContainer;
                        };
                
                        let imagesPreview = function(input, placeToInsertImagePreview) {
                            if (input.files) {
                                let filesAmount = input.files.length;
                                placeToInsertImagePreview.html('');
                                for (let i = 0; i < filesAmount; i++) {
                                    let reader = new FileReader();
                                    reader.onload = function(event) {
                                        let imageSrc = event.target.result;
                                        let imageName = input.files[i].name;
                                        let imageContainer = createImageContainer(imageSrc, imageName);
                                        placeToInsertImagePreview.append(imageContainer);
                                    };
                                    reader.readAsDataURL(input.files[i]);
                                }
                            }
                        };
                
                        $(document).on("click", ".delete-btn", function(event) {
                            console.log("delete button clicked");
                            let imageName = event.target.getAttribute('data-image');
                            $(this).closest(".position-relative").remove();
                            let inputImages = document.getElementById("input-images");
                            console.log(inputImages.files);
                
                            if (inputImages) {
                                let inputFiles = inputImages.files;
                                console.log(inputFiles);
                                
                                let newFiles = [];
                                for (let i = 0; i < inputFiles.length; i++) {
                                    if (inputFiles[i].name !== imageName) {
                                        newFiles.push(inputFiles[i]);
                                        console.log(newFiles[i]);
                                        console.log(i);
                                    }
                                }
                
                                let newFileList = new DataTransfer();
                                for (let i = 0; i < newFiles.length; i++) {
                                    newFileList.items.add(newFiles[i]);
                                }
                                inputImages.files = newFileList.files;
                            }
                        });
                
                        $("#input-images").on("change", function() {
                            $('.preview-images').html('');
                            imagesPreview(this, $(".preview-images"));
                        });
                
                        $('.preview-images').on('mouseenter', '.product-img', function() {
                            $(this).find('img').fadeTo(300, 0.5);
                            $(this).find('.btn-center').show();
                        }).on('mouseleave', '.product-img', function() {
                            $(this).find('img').fadeTo(300, 1);
                            $(this).find('.btn-center').hide();
                        });
                
                        $(document).on("click", ".crop", function() {
                            let inputImages = document.getElementById("input-images");
                
                            if (inputImages.files.length > 0) {
                                let imagesHTML = "";
                                let cropperInstances = [];
                                for (let i = 0; i < inputImages.files.length; i++) {
                                    let reader = new FileReader();
                                    reader.onload = function(e) {
                                        imagesHTML += `<div style="display:inline-block; margin: 5px;">
                                            <img src="${e.target.result}" id="image-${i}" style="max-width: 200px; max-height: 400px; margin-bottom: 10px;">
                                        </div>`;
                                        if (i === inputImages.files.length - 1) {
                                            Swal.fire({
                                                title: "Crop Images",
                                                html: `<div id="images-container">${imagesHTML}</div>`,
                                                showCancelButton: true,
                                                confirmButtonText: 'Crop',
                                                didOpen: () => {
                                                    for (let j = 0; j < inputImages.files.length; j++) {
                                                        let cropper = new Cropper(document.getElementById(`image-${j}`), {
                                                            aspectRatio: 1,
                                                            viewMode: 1,
                                                            autoCropArea: 1,
                                                            movable: true,
                                                            zoomable: true,
                                                            rotatable: true,
                                                            scalable: true,
                                                        });
                                                        cropperInstances.push(cropper);
                                                    }
                                                },
                                                preConfirm: () => {
                                                    let croppedImages = [];
                                                    for (let j = 0; j < cropperInstances.length; j++) {
                                                        let cropper = cropperInstances[j];
                                                        let canvas = cropper.getCroppedCanvas();
                                                        croppedImages.push(canvas.toDataURL());
                                                    }
                                                    return { croppedImages, cropperInstances };
                                                }
                                            }).then((result) => {
                                                if (result.isConfirmed) {
                                                    let { croppedImages } = result.value;
                                                    let newFileList = new DataTransfer();
                                                    let originalFileNames = [];
                                                    
                                                    for (let i = 0; i < inputImages.files.length; i++) {
                                                        originalFileNames.push(inputImages.files[i].name);
                                                    }
                
                                                    croppedImages.forEach((src, index) => {
                                                        let imageName = originalFileNames[index]; 
                                                        let imageContainer = createImageContainer(src, imageName);
                                                    
                                                        let originalImageContainer = $(`button[data-image="${imageName}"]`).closest(".position-relative");
                                                        originalImageContainer.find("img.default-img").attr("src", src);
                
                                                        
                                                        cropperInstances[index].getCroppedCanvas().toBlob((blob) => {
                                                            let file = new File([blob], imageName, { type: 'image/png' });
                                                            newFileList.items.add(file);
                                                            if (index === croppedImages.length - 1) {
                                                                inputImages.files = newFileList.files;
                                                            }
                                                        });
                                                    });
                                                }
                                            });
                                        }
                                    };
                                    reader.readAsDataURL(inputImages.files[i]);
                                }
                            }
                        });
            
                        let inputImages = document.getElementById("input-images");
                        imagesPreview(inputImages, $("#cropped-images-container"));
                    });
                </script>
                
                
                
            </script>
            
                    




                           
                
                <style>
                    .btn-center {
                        position: absolute;
                        top: 70%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        display: none; /* Initially hide the button */
                    }
                </style>







                <div class="col-lg-3">
                    <div class="card mb-4">
                        <div class="card-body">
                            <div class="mb-4">
<!-- price xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx -->
                                <label class="form-label">Price</label>
                                <input type="number" placeholder="Type here" class="form-control" name="price" id="price" >
                                <div style="color: red; " > <p id="priceError" ></p></div>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">gender</label>
                                <select class="form-select" name="gender">
                                    <option disabled selected>gender</option>
                                    <option value="true">Male</option>
                                    <option value="false">Female</option>
                                </select>
                            </div>
                            <div class="mb-4">
                                <label class="form-label">Tags</label>
                                <input type="text" placeholder="Type here" class="form-control" name="tags">
                            </div>
                            <hr>
                            <h5 class="mb-3 text-brand text-center">Apparel Categories</h5>

<!-- ivde aanu button -->
                            
                            <div class="container ml-5 mb-3 ">

                                <button id="addCategoryBtn" class="btn btn-brand " style="width: 100%;">+ Add Category</button s>
                                <div id="categoryFields" class="mt-3 d-none">
                                    <div class="form-group">
                                        <input type="text" id="categoryName" class="form-control mb-2" placeholder="Category Name">
                                    </div>
                                    <div class="form-group">
                                        <input type="text" id="categoryDescription" class="form-control mb-2" placeholder="Category Description">
                                    </div>
                                    <button id="additionBtn" class="btn btn-primary" onclick="updatecategory1()">ADD</button>
                                </div>
                            </div>
                            <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const addCategoryBtn = document.getElementById('addCategoryBtn');
    const categoryFields = document.getElementById('categoryFields');

    addCategoryBtn.addEventListener('click', function() {
        categoryFields.classList.toggle('d-none');

        addCategoryBtn.textContent =(addCategoryBtn.textContent === '+ Add Category') ? '- Add Category' : '+ Add Category';
    });
});
</script>
    <script>
                             async function updatecategory1(){
                                try {

                                    console.log("function called")
                                const categoryName=document.getElementById("categoryName").value
                                console.log(categoryName);

                                const response= await fetch(`/updatecategory1?generalcategory=${categoryName}`,{
                                    method:"GET",

                                })
                                if (!response.ok){
                                    throw new Error("error is occured")
                                }
                                console.log("success");
                                location.reload()

                             
                                    
                                } catch (error) {


                                    console.log(error)
                                    
                                }


                             }
                           

                        </script>
</script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<% for(let i=0; i<newcategories.length; i++) {%>

<div class="form-check " >
    <input class="form-check-input" type="radio" value="<%= newcategories[i]._id %>" id="product-cat" name="Categories">
    <label class="form-check-label" for="product-cat"><%= newcategories[i].categoryname %> </label>
    <i class="fas fa-edit ml-2 text-primary edit-category" data-category-id="<%= newcategories[i]._id %>"></i>
</div>
<% }%>
<hr>
<script src="/js/updateCategory.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const editCategoryIcons = document.querySelectorAll('.edit-category');
        let selectedCategoryId;

        editCategoryIcons.forEach(icon => {
            icon.addEventListener('click', function () {
                
                selectedCategoryId = icon.dataset.categoryId;

               
                Swal.fire({
  title: 'Edit the brand Name',
  input: 'text',
  inputLabel: 'Your new category name',
  inputValue: icon.previousElementSibling.textContent,
  showCancelButton: true,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to write something!'
    }
  }
}).then((result)=>{
    if (result.isConfirmed && result.value) {

icon.previousElementSibling.textContent = result.value;


updateCategory(selectedCategoryId, result.value);
    }

})
    
            });
        });
    });
    </script>

                    <h5 class="mb-3 text-center text-warning">Heroic charecters</h5>


                    
                        <div class="container ml-5 mb-3">
                            <button id="newCategoryBtn" class="btn btn-brand" style="width: 100%;">+ Add charectors</button>
                            <div id="newCategoryFields" class="mt-3 d-none">
                                <div class="form-group">
                                    <input type="text" id="newCategoryName" class="form-control mb-2" placeholder="New Category Name">
                                </div>
                                <div class="form-group">
                                    <input type="text" id="newCategoryDescription" class="form-control mb-2" placeholder="New Category Description">
                                </div>
                                <button id="newAdditionBtn" class="btn btn-warning" onclick="updatecategory()">ADD </button>
                            </div>
                        </div>
                        
                        <!-- Add Bootstrap JS and Popper.js -->
                        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
                        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
                        <script>
                        document.addEventListener('DOMContentLoaded', function() {
                            const newCategoryBtn = document.getElementById('newCategoryBtn');
                             newCategoryFields = document.getElementById('newCategoryFields');
                        
                            newCategoryBtn.addEventListener('click', function() {
                                newCategoryFields.classList.toggle('d-none');
                                newCategoryBtn.textContent = (newCategoryBtn.textContent === '+ New Category') ? '- New Charectors' : '+ New Charectors';
                            });
                        });
                        
                        </script>
                        <script>
                             async function updatecategory(){
                                try {

                                    console.log("function called")
                                const categoryName=document.getElementById("newCategoryName").value
                                console.log(categoryName);

                                const response= await fetch(`/updatecategory?category=${categoryName}`,{
                                    method:"GET",

                                })
                                if (!response.ok){
                                    throw new Error("error is occured")
                                }
                                console.log("success");
                                location.reload()

                             
                                    
                                } catch (error) {


                                    console.log(error)
                                    
                                }


                             }
                           

                        </script>
                       
                        
                        <% for(let i=0; i< license.length; i++) {%>
                        
                        <div class="form-check">
                        <input class="form-check-input" type="radio" value="<%= license[i]._id %>" id="product-cat" name="subcategory">
                        <label class="form-check-label" for="product-cat"><%= license[i].categoryname %> </label>
                        <i class="fas fa-edit ml-2 text-primary edit-category1" data-category-id="<%= license[i]._id %>"></i>
                        </div>
                    
                  <% } %>
                  <hr>
                  <script src="/js/updateCategory.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const editCategoryIcons = document.querySelectorAll('.edit-category1');
        let selectedCategoryId;

        editCategoryIcons.forEach(icon => {
            icon.addEventListener('click', function () {
                
                selectedCategoryId = icon.dataset.categoryId;

               
                Swal.fire({
  title: 'Edit the licensed charectors Name',
  input: 'text',
  inputLabel: 'Your new category name',
  inputValue: icon.previousElementSibling.textContent,
  showCancelButton: true,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to write something!'
    }
  }
}).then((result)=>{
    if (result.isConfirmed && result.value) {

icon.previousElementSibling.textContent = result.value;


updateCategory(selectedCategoryId, result.value);
    }

})
    
            });
        });
    });
    </script>

                  
                    
            </div> <!-- card end// -->
           
            

            
<h5 class="mb-3 text-center text-brand">Brands</h5>
<div class="container ml-5 mb-3">
    <button id="newBrandBtn" class="btn btn-brand" style="width: 100%; border-radius: 8px; font-size: 16px; padding: 10px;">
        + Add Brands
    </button>
    
    <div id="newBrandFields" class="mt-3 d-none">
        <div class="form-group">
            <input type="text" id="newbrand" class="form-control mb-2" placeholder="New Brand Name">
        </div>
        <div class="form-group">
            <input type="text" id="newBrandDescription" class="form-control mb-2" placeholder="New Brand Description">
        </div>
        <button id="newBrandAdditionBtn" class="btn btn-primary" onclick="updateBrand()">ADD</button>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
       
        const newBrandBtn = document.getElementById('newBrandBtn');
        const newBrandFields = document.getElementById('newBrandFields');

        newBrandBtn.addEventListener('click', function () {
            newBrandFields.classList.toggle('d-none');
            newBrandBtn.textContent = (newBrandBtn.textContent === '+ Add Brands') ? '- Add Brands' : '+ Add Brands';
        });
    });
    </script>
<script>
    
    async function updateBrand() {
        try {
            console.log("fucntion called")
            const newBrandName =  document.getElementById("newbrand").value;
            console.log(newBrandName);
        
            const response = await fetch(`/updatebrand?brandname=${newBrandName}`,{
                method:"GET",

            })
           

            if(!response.ok){
                throw new Error("update brands have some error")
            }else{

                location.reload();
            }
            
            console.log("Brand added successfully");
        } catch (error) {
            console.log(error);
        }
    }

</script>
</script>

<div>
<% for(let i=0; i<brand.length; i++) {%>

<div class="form-check " >
    <input class="form-check-input" type="radio" value="<%= brand[i]._id %>" id="product-cat" name="brand-cat">
    <label class="form-check-label" for="product-cat"><%= brand[i].name %> </label>
    <i class="fas fa-edit ml-2 text-primary edit-category2" data-category-id="<%= brand[i]._id %>"></i>
</div>
<% }%>
<hr>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const editCategoryIcons = document.querySelectorAll('.edit-category2');
        let selectedCategoryId;

        editCategoryIcons.forEach(icon => {
            icon.addEventListener('click',  function () {
                
                selectedCategoryId = icon.dataset.categoryId;

                 Swal.fire({
  title: 'Edit the brand Name',
  input: 'text',
  inputLabel: 'Your new category name',
  inputValue: icon.previousElementSibling.textContent,
  showCancelButton: true,
  inputValidator: (value) => {
    if (!value) {
      return 'You need to write something!'
    }
  }
}).then((result)=>{
    if (result.isConfirmed && result.value) {

icon.previousElementSibling.textContent = result.value;


updateCategory(selectedCategoryId, result.value);
    }

})
    
            });
        });
    });
    </script>
    <style>
        .error {
            border: 1px solid red
        }
        </style>


<script>

    function validateForm(){
        const stockValue = parseFloat(document.getElementById('product_sku').value)
        const pricevalue = parseFloat(document.getElementById("price").value);
        

        if(stockValue <=0 ){
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Stock cannot be less than zero.',
            })
        }else if(pricevalue <=0){
                Swal.fire({
                    icon : "error",
                    title: "Error",
                    text: "price cannot be less than zero"
                })
            
            return false;
        }

        if (!intverify()) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Some stock values are less than zero.',
        });
        return false;
    }
    if(!textverify()){
     
        Swal.fire({
            icon:"error",
            title: "Error",
            text:"Product Title is not Valid"
        })
        return false
    }
    if(!descverify()){
        Swal.fire({
            icon:"error",
            title: "Error",
            text:"Product Title is not Valid"
        })
        return false
        
    }

        const productTitle = document.getElementById('product_title').value;
        const productColor = document.getElementById('product_color').value;
        const productSize = document.querySelector('select[name="size"]').value;
        const description = document.querySelector('textarea[name="Description"]').value;
        const price = document.querySelector('input[name="price"]').value;
        const gender = document.querySelector('select[name="gender"]').value;
        const tags = document.querySelector('input[name="tags"]').value;

        const smallStock = document.getElementById("sizeS").value;
        const mediumStock = document.getElementById("sizeS").value;
        const largeStock = document.getElementById("sizeS").value;
        const XlStock = document.getElementById("sizeS").value;
        const XXLStock = document.getElementById("sizeS").value;

        
        if (!productTitle || !productColor || !productSize || !description || !price || !gender ) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please fill in all required fields.',
            });
            return false;
        }

            if(gender == "" || gender== "gender"){
                Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please select the gender',
            });
            return false;

            }
 
        

        return true;
    }   
    
async function save() {
    if(validateForm()){
  try {
    var formData = new FormData();

const fileInput = document.getElementById('input-images');

for (let i = 0; i < fileInput.files.length; i++) {
  formData.append('images', fileInput.files[i]);
}

formData.append('productTitle', document.getElementById('product_title').value);
formData.append('productSKU', document.getElementById('product_sku').value);
formData.append('productColor', document.getElementById('product_color').value);
formData.append('productSize', document.querySelector('select[name="size"]').value);
formData.append('description', document.querySelector('textarea[name="Description"]').value);
formData.append('price', document.querySelector('input[name="price"]').value);
formData.append('gender', document.querySelector('select[name="gender"]').value);
formData.append('tags', document.querySelector('input[name="tags"]').value);
formData.append('category', getRadioValue('Categories'));
formData.append('subcategory', getRadioValue('subcategory'));
formData.append('brand', getRadioValue('brand-cat'));

formData.append('size_s', document.getElementById("sizeS").value);
formData.append('size_m', document.getElementById("sizeM").value);
formData.append('size_l', document.getElementById("sizeL").value);
formData.append('size_xl', document.getElementById("sizeXL").value);
formData.append('size_xxl', document.getElementById("sizeXXL").value);

console.log(formData);

const response = await fetch("/save", {
  method: 'POST',
  body: formData
});

if (!response.ok) {
  throw new Error(`Error`);
}

const data = await response.json();
console.log(`Success:`, data);

swal.fire({
  title: "Saved!",
  text: "The product have been Saved",
  icon: "success",
  button: "okay",
}).then(()=>{
    window.location.reload()
})


  } catch (error) {
    console.error(error.message);
  }
}
}

    function getRadioValue(name) {
        var radioButtons = document.getElementsByName(name);
        for (var i = 0; i < radioButtons.length; i++) {
            if (radioButtons[i].checked) {
                return radioButtons[i].value;
            }
        }
        
        
        return null; 
    }
    
</script>



  

    


                </div>
            </div>
        </section>
        <footer class="main-footer font-xs">
            <div class="row pb-30 pt-15">
                <div class="col-sm-6">
                    <script>
                    document.write(new Date().getFullYear())
                    </script> ©, Evara - HTML Ecommerce Template .
                </div>
                <div class="col-sm-6">
                    <div class="text-sm-end">
                        All rights reserved
                    </div>
                </div>
            </div>
        </footer>
    </main>
    <%- include('./partials/footer.ejs') %>
</body>


<!-- Mirrored from wp.alithemes.com/html/evara/evara-backend//page-form-product-3 by HTTrack Website Copier/3.x [XR&CO'2014], Sun, 01 Aug 2021 15:33:32 GMT -->
</html>